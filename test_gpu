sudo apt update
sudo apt install python3.10 python3.10-venv python3-pip

python3 -m venv torch_env
source torch_env/bin/activate
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 
pip install tqdm

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torchvision
import torchvision.transforms as transforms
from tqdm import tqdm
import time

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Используемое устройство: {device}")
if torch.cuda.is_available():
    print(f"GPU: {torch.cuda.get_device_name(0)}")
    print(f"Версия CUDA: {torch.version.cuda}")
    print(f"Всего видеопамяти: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.2f} GB")
    print(f"Свободно видеопамяти: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.2f} GB (начальное значение)") # Общая память == "свободная" до выделения
else:
    print("Предупреждение: GPU не обнаружен. Обучение будет выполняться на CPU.")

transform_train = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)
test_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform_test)

batch_size = 128
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=2)

print(f"Размер обучающей выборки: {len(train_dataset)}")
print(f"Размер тестовой выборки: {len(test_dataset)}")
print(f"Размер батча: {batch_size}")


class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(28 * 28, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = SimpleNet().to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

def train_one_epoch(model, dataloader, criterion, optimizer, device):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    for data in tqdm(dataloader, desc="Обучение"):
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

    epoch_loss = running_loss / len(dataloader)
    epoch_acc = 100. * correct / total
    return epoch_loss, epoch_acc

def test_model(model, dataloader, criterion, device):
    model.eval()
    test_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for data in tqdm(dataloader, desc="Тестирование"):
            inputs, labels = data
            inputs, labels = inputs.to(device), labels.to(device)

            outputs = model(inputs)
            loss = criterion(outputs, labels)

            test_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()

    avg_test_loss = test_loss / len(dataloader)
    test_acc = 100. * correct / total
    return avg_test_loss, test_acc

print("\nНачало обучения...")
start_time = time.time()

num_epochs = 5

for epoch in range(num_epochs):
    print(f'\nЭпоха {epoch+1}/{num_epochs}')
    train_loss, train_acc = train_one_epoch(model, train_loader, criterion, optimizer, device)
    test_loss, test_acc = test_model(model, test_loader, criterion, device)

    print(f'Эпоха {epoch+1}:')
    print(f'  Обучающий Loss: {train_loss:.4f}, Обучающая Acc: {train_acc:.2f}%')
    print(f'  Тестовый Loss: {test_loss:.4f}, Тестовая Acc: {test_acc:.2f}%')
    if torch.cuda.is_available():
        print(f"Макс. использовано видеопамяти: {torch.cuda.max_memory_allocated(device) / 1024**3:.2f} GB")
        print(f"Текущее использование видеопамяти: {torch.cuda.memory_allocated(device) / 1024**3:.2f} GB")


total_time = time.time() - start_time
print(f"\nОбучение завершено за {total_time:.2f} секунд.")
print(f"Финальная тестовая точность: {test_acc:.2f}%")

if torch.cuda.is_available():
    print(f"[GPU STATS] Пиковое использование видеопамяти: {torch.cuda.max_memory_allocated(device) / 1024**3:.2f} GB из {torch.cuda.get_device_properties(0).total_memory / 1024**3:.2f} GB.")
    torch.cuda.empty_cache()
